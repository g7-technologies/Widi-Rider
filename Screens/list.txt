import { connect } from "react-redux";
import React, { useRef, isValidElement, useEffect, useState } from "react";
import {
  Dimensions,
  Animated,
  StyleSheet,
  AppState,
  TextInput,
  Image,
  Text,
  Alert,
  ScrollView,
  View,
  BackHandler,
  ImageBackground
} from "react-native";
import * as Permissions from "expo-permissions";
import * as Notifications from "expo-notifications";
import * as Location from "expo-location";
import { MaterialCommunityIcons ,Ionicons} from "@expo/vector-icons";
import MapView, { Callout, Marker,Polyline } from "react-native-maps";
import { TouchableOpacity } from "react-native-gesture-handler";
import * as firebase from "firebase";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { getDistance, getPreciseDistance } from "geolib";
import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import { Video, AVPlaybackStatus } from 'expo-av';
import { basepath } from "../BasePath/Basepath";
var firebaseConfig = {
  apiKey: "AIzaSyB-_1l1k5RmgGk_EvghDsYbP1obo51J6Hw",
  authDomain: "widideliveryboy.firebaseapp.com",
  databaseURL: "https://widideliveryboy-default-rtdb.firebaseio.com",
  projectId: "widideliveryboy",
  storageBucket: "widideliveryboy.appspot.com",
  messagingSenderId: "180629219472",
  appId: "1:180629219472:web:56ce6c7af84dd7570a9015",
  measurementId: "G-RQXZYMT0SW",
};

if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}



const LOCATION_TASK_NAME = 'background-location-task';
TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
    // Error occurred - check `error.message` for more details.
    return;
  }
   if (data) {
    const { locations } = data;
    //console.log(locations[0].coords.latitude)
    Backgroundup(locations[0].coords.latitude,locations[0].coords.longitude,)
  }
});
var is_order_complete=true  
const GEO_FENCING_LOCATION = 'location-task';
TaskManager.defineTask(GEO_FENCING_LOCATION, ({ data, error }) => {
    if (error) {
      // Error occurred - check `error.message` for more details.
      return;
    }
     if (data) {
      
      //console.log(locations[0].coords.latitude)
      console.log('geofencing data',data.eventType)
      if(data.eventType==1){
     is_order_complete=true
      }else{
       is_order_complete=false
      }
    }
});

async function Backgroundup(lat,lng,) 
  {
    // navigation.navigate('FoodDelivered')
    return
    let user = await AsyncStorage.getItem("DELIVERY_BOY_USER_DATA");
    let user_id = JSON.parse(user);
    firebase
      .database()
      .ref("users/" + user_id.id)
      .set({
        latitude: lat,
        longitude: lng,
      });
    // alert('data is load from firebase lat is ' +lat+'      lng is'+lng)
  }


function OrderDistanceScreen({ navigation,route }) {
  const [latitude, getlatitude] = useState(parseFloat(route.params.latitude));
// var d=useState( route.params.order_detail.order_detail)
// var u=JSON.parse(d)
// var ord=u.order_id
  const [longitude, getlongitude] = useState(parseFloat( route.params.longitude));
  const [orderstatus,order_status]=useState(route.params.order)
  const [orderid,get_order_id]=useState(route.params.ordernumber)

  const [location, setLocation] = useState(null);
  const [getlocation, getLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [id, userid] = useState("");
  const appState = useRef(AppState.currentState);
  const [appStateVisible, setAppStateVisible] = useState(appState.current);
  const [currentlocationcoords,getcurrentlocationcoords]=useState(null)
  const [status,getcurrentstatus]=useState(null)
  const mapref = React.useRef(null);
  
  function centerMap() 
  {
    let latitude = location.latitude;
    let longitude = location.longitude;
    let latitudeDelta = 0.01;
    let longitudeDelta = 0.01;

    mapref.current.animateToRegion({
      latitude,
      longitude,
      latitudeDelta,
      longitudeDelta,
    });
 
  }
  useEffect(() => {
    const backAction = () => {
     if(is_order_complete){
      //  navigation.popToTop()

     }else{
       navigation.goBack(null)
     }
      return true;
    };
  
    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
  
    return () => backHandler.remove();
  }, []);
  
  useEffect(() => {
    navigation.addListener('focus', () => {
    });
    // console.log(route)
    GetUserLocation();
   StartGeoFencing()
  }, []);
  async function GetUserLocation() 
  {  
    let { status } = await Location.requestPermissionsAsync();
    if (status !== "granted") {
      setErrorMsg("Permission to access location was denied");
      return;
    }

     await Location.watchPositionAsync(
      {accuracy:Location.Accuracy.BestForNavigation,timeInterval:15000},
        (location)=>{ getLocation(location.coords),GetFirebaseOrdersData(location.coords.latitude,location.coords.longitude,location)}
      );
  }
  function GetFirebaseOrdersData(lat ,lng,location) 
  {
    var x =null;
    var userlat=null;
    var userlng=null;
    var query = firebase.database().ref("order_status/"+orderstatus).orderByKey();
    query.on("value",  (snapshot) => {
      // snapshot.forEach( (childSnapshot)=> {
      //   var childData = childSnapshot.val();
        
       
      // });
   
      // console.log(orderstatus)
      x=snapshot.val().status
      userlat=parseFloat( snapshot.val().data.latitude)
      userlng=parseFloat(snapshot.val().data.longitude)
      
    });

    if(x==2)
    {
      getlatitude(userlat)
      getlongitude(userlng)      
      setLocation( location.coords)
      saveDeliveryBoyLocation(lat,lng)
      Directions(userlat,userlng)
    }else{
    setLocation( location.coords)
   saveDeliveryBoyLocation(lat,lng)
   Directions(lat,lng)
    }
    // alert('data is load from firebase lat is ' +lat+'      lng is'+lng)
  }
  
  async function StartGeoFencing() {
   await Location.startGeofencingAsync(GEO_FENCING_LOCATION, [{
       latitude:latitude,
       longitude:longitude,
       radius:20,
       notifyOnEnter:true,
       notifyonExit:true
   }])
  }
  
  async function Directions(lat,lng) {
    
    const resp = await fetch(
      //32.189631,74.180146
      //32.161663,74.192826
      `https://maps.googleapis.com/maps/api/directions/json?origin=${lat},${lng}&destination=${latitude},${longitude}&key=AIzaSyC_LWPOTamnTLKR0IVa5pX_w2Zxo9hE0Sw`
    );
    const response = await resp.json();
    let points = response.routes[0].overview_polyline.points;
// console.log(response)
    decode(points);
  };
 
  async function decode  (encoded) {
    // array that holds the points

    var points = [];
    var index = 0,
      len = encoded.length;
    var lat = 0,
      lng = 0;
    while (index < len) {
      var b,
        shift = 0,
        result = 0;
      do {
        b = encoded.charAt(index++).charCodeAt(0) - 63; //finds ascii                                                                                    //and substract it by 63
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);

      var dlat = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
      lat += dlat;
      shift = 0;
      result = 0;
      do {
        b = encoded.charAt(index++).charCodeAt(0) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      var dlng = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
      lng += dlng;

      points.push({ latitude: lat / 1e5, longitude: lng / 1e5 });
    }
    let destinationpoints = points;
    getcurrentlocationcoords(destinationpoints)
    // this.setState({ coordss: destinationpoints, });

  };


  async function  StartBackgroundLocationUpdate  () {
      const { status } = await Location.requestPermissionsAsync();
      if (status === 'granted') {
        await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, { 
          accuracy: Location.Accuracy.BestForNavigation,
          timeInterval: 10000,
          // // distanceInterval: LOCATION_DISTANCE_INTERVAL,
          // foregroundService: {
          //     notificationTitle:' LOCATION_TITLE',
          //     notificationBody: 'LOCATION_SUBTITLE'
          // }
        });
      }else{
        alert('Permission to access location was denied pleaase enable it from setting')
      }
    };
    async function StopBackgroundLocationUpdate(params) {
      await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME,()=>console.log('Location update stop '))
    }
  
    useEffect(() => {
      AppState.addEventListener("change", _handleAppStateChange);
  
      return () => {
        AppState.removeEventListener("change", _handleAppStateChange);
      };
    }, []);
    const _handleAppStateChange = (nextAppState) => {
      if (
        appState.current.match(/inactive|background/) &&
        nextAppState === "active"
      ) {
        StopBackgroundLocationUpdate()
      }else{
        StartBackgroundLocationUpdate()
      }
  
      appState.current = nextAppState;
      setAppStateVisible(appState.current);
     
    };
    async function  Complete_Order (){
       const formData = new FormData()
       
       formData.append('order_id', orderstatus);
      
       try{
         fetch(`${basepath}complete_order`, {
           method: 'POST',
           headers: {
             Accept: "application/json",
             "Content-Type": "multipart/form-data",
           },
           body:formData
         })
         .then((response) => response.json())
         .then((responseJson) => {
          console.log('token')
            console.log( responseJson)
            console.log('token')
          
         })
         .catch((error) =>{});
       }catch(e){}
     }
 
  
 

  async function saveDeliveryBoyLocation(lat, lng) {
    let user = await AsyncStorage.getItem("DELIVERY_BOY_USER_DATA");
    let user_id = JSON.parse(user);
    firebase
      .database()
      .ref("users/" + user_id.id)
      .set({
        latitude: lat,
        longitude: lng,
      });
  }

  

  

  return (
    <>
    {is_order_complete?
    <View style={{flex:1,backgroundColor:'#fff'}}>
      <View style={styles.header}>
        <TouchableOpacity onPress={()=>  navigation.popToTop()} style={{flexDirection:'row',alignItems:'center',margin:5,marginLeft:20,}}>
            {Platform.OS=='ios'?
                <Ionicons name="ios-arrow-back" style={{top:4}} size={24} color="#fff" />
                :
                <Ionicons name="md-arrow-back" style={{top:4}} size={24} color="#FFF" />
            }
            <Text style={styles.textcolor}>Order Complete</Text>
        </TouchableOpacity>
       
      </View>
      <View style={{flex:1,}}>
        <Video
            style={{width:300,alignSelf:'center',height:300}}
            source={require( '../Video_animations/kk3tv5hf.mp4')}
            shouldPlay={true}
            resizeMode="contain"
            isLooping
        />
        <TouchableOpacity onPress={()=>Complete_Order()} style={styles.LoginButton}>
          <Text style={styles.text}>Order Delivered</Text>
        </TouchableOpacity>
      </View>
    </View>
:

    <View style={{ flex: 1 }}>
      {location == null ? (
        <View
          style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
        >
          <Text>Loading Map Please Wait</Text>
        </View>
      ) : (
        <MapView
          ref={mapref}
          initialRegion={{
            latitude: location.latitude,
            longitude: location.longitude,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01,
          }}
          style={styles.map}
        >
          <Marker
            // title="asdadasdasdas"
           // image={require("../assets/Delivery_Boy.png")}
            coordinate={{
              latitude: location.latitude,
              longitude: location.longitude,
            }}
          >
            <Callout>
              <Text>My Location</Text>
            </Callout>
          </Marker>
          <Marker
            // title="asdadasdasdas"
            //image={require("../assets/Delivery_Boy.png")}
            coordinate={{latitude:latitude,longitude:longitude}}
          >
            <Callout>
              <Text>Hotel</Text>
            </Callout>
          </Marker>
         {currentlocationcoords==null?null:
          <Polyline
            coordinates={currentlocationcoords}
            strokeColor="red"
            fillColor="rgba(255,0,0,0.5)"
            strokeWidth={4}
          />
         }
          
        </MapView>
      )}
      <View style={{ position: "absolute", alignSelf: "flex-end" }}>
        <TouchableOpacity onPress={() => centerMap()}>
          <MaterialCommunityIcons
            name="crosshairs-gps"
            style={{ alignSelf: "flex-end", margin: 10 }}
            size={24}
            color="#0f76de"
          />
        </TouchableOpacity>
       
      </View>
    </View>
}
    </>
  );
}

export default OrderDistanceScreen;

const styles = StyleSheet.create({
  map: {
    width: Dimensions.get("window").width,
    height: Dimensions.get("window").height,
  },
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 22,
  },
  modalView: {
    margin: 20,
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 35,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  openButton: {
    backgroundColor: '#F194FF',
    borderRadius: 20,
    padding: 10,
    elevation: 2,
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  modalText: {
    marginBottom: 15,
    textAlign: 'center',
  },
  header:{
    backgroundColor:'#0f76de',
    height:60,
    justifyContent:'center',
    
  },
  textcolor:{
   fontFamily:'poppinbold',
    color:'#fff',
    top:4,
    marginLeft:30
  },
  LoginButton:{
    backgroundColor:'#0f76de',
    padding:10,
    margin:20,
    borderRadius:5
},
text:{
    fontWeight:'600',
    fontSize:15,
    textAlign:'center',
    letterSpacing:1,
    color:'#fff'
},
});
